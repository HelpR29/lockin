-- Premarket Checklist Tables
-- Safe to run multiple times; uses IF NOT EXISTS where possible

-- Master checklist items per user
create table if not exists public.premarket_checklist_items (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  text text not null,
  sort integer not null default 0,
  is_active boolean not null default true,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now()
);

create index if not exists idx_pmi_user on public.premarket_checklist_items(user_id);

-- Daily completion per checklist item
create table if not exists public.premarket_checklist_daily (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  date date not null,
  item_id bigint not null,
  morning_checked boolean not null default false,
  eod_confirmed boolean not null default false,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint fk_item foreign key (item_id) references public.premarket_checklist_items(id) on delete cascade,
  constraint uq_daily unique (user_id, date, item_id)
);

create index if not exists idx_pmd_user_date on public.premarket_checklist_daily(user_id, date);

-- Trigger to auto-update updated_at
create or replace function public.set_timestamp()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger set_timestamp_pmi
before update on public.premarket_checklist_items
for each row execute function public.set_timestamp();

create trigger set_timestamp_pmd
before update on public.premarket_checklist_daily
for each row execute function public.set_timestamp();
